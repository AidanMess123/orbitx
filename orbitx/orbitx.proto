// If you're getting 'orbitx_pb2 module not found' errors,
// remember to run `make` or `make proto`!!

// A syntax note: in a protobuf definition, 'double x = 10;' does not mean
// that the starting value of x will be 10, it just means that x is the tenth
// field. This is used for backwards compatibility purposes.
syntax = "proto3";


// Keep state in sync with all clients
// This is a GRPC protobuf definition, not just plain protobuf code.
service StateServer {
    // Sync physical entities
    // There needs to be an input, but there currently isn't any reason to have
    // an input. So for now, we just put something in here (ClientId).
    rpc get_physical_state (Command) returns (PhysicalState) {}
}


message Command {
    enum Idents {
        NOOP = 0;
        HAB_SPIN_CHANGE = 1;
        HAB_THROTTLE_CHANGE = 2;
        HAB_THROTTLE_SET = 3;
        TIME_ACC_SET = 4;
        ENGINEERING_UPDATE = 5;
        UNDOCK = 6;
        REFERENCE_UPDATE = 7;
        TARGET_UPDATE = 8;
        LOAD_SAVEFILE = 9;
    }

    message EngineeringUpdate {
        double max_thrust = 1;
        double hab_fuel = 2;
        double ayse_fuel = 3;
    }

    Idents ident = 1;

    oneof arg {
        double spin_change = 2;
        double throttle_change = 3;
        double throttle_set = 4;
        double time_acc_set = 5;
        EngineeringUpdate engineering_update = 6;
        string reference = 7;
        string target = 8;
        string loadfile = 9;
    }
}

// To use this object in python code, you can do things like:
// entity1 = Entity()
// entity1.name = 'bob'
// or,
// entity2 = Entity(name='bob')
// entity1 == entity2
// This protobuf object is good for serializing this data to other things,
// like JSON or over the network. GRPC requires protobufs as well!
// Google 'protobuf python generated code reference' for more examples.
message Entity {
    string name = 1;
    double x = 2;
    double y = 3;
    double vx = 4;
    double vy = 5;
    double r = 6;
    double mass = 7;
    double heading = 8; // the 'angular position'
    double spin = 9; // the 'angular velocity'
    double fuel = 10; // only spaceships have fuel
    double throttle = 11;
    string attached_to = 12; // another entity this entity is attached to
    bool broken = 13;
    bool artificial = 14;
}

// To use this in python code, think of `entities` as a list, except to add an
// item to the list you have to use the special `add(...)` method. For example,
// ps = PhysicalState()
// ps.timestamp = 5
// or equivalently, ps = PhysicalState(timestamp=5)
// then,
// entity0 = ps.entities.add()
// entity0.name = 'bob'
// ps.entities[0] == entity0
// or you can also do
// ps.entities.add(name='belize')
// ps.entities[1].name == 'belize'
// This comes with all the usual python list goodness, like
// for entity in ps.entities:
//     log.info(entity.name)
// Again, googling 'protobuf python generated code reference' and looking for
// repeated fields will help answer other questions.
message PhysicalState {
    repeated Entity entities = 1;
    double timestamp = 2;
    double time_acc = 3;
    string craft = 4;
    string reference = 5;
    string target = 6;
}
